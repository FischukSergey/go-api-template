// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"
	"github.com/google/uuid"
)


type MessageID uuid.UUID

func (c MessageID) String() string {
	return uuid.UUID(c).String()
}

//TextMarshaler реализует интерфейс encoding.TextMarshaler
func (c MessageID) MarshalText() ([]byte, error) {
	return uuid.UUID(c).MarshalText()
}

//TextUnmarshaler реализует интерфейс encoding.TextUnmarshaler
func (c *MessageID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

//ValueScanner реализует интерфейс entfield.ValueScanner
//из двух методов: Scan и Value
func (c *MessageID) Scan(src interface{}) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c MessageID) Value() (driver.Value, error) {
	return uuid.UUID(c).Value()
}

//Validator реализует интерфейс entfield.Validator
func (c MessageID) Validate() error {
	if c == MessageIDNil {
		return errors.New("MessageID is nil")
	}
	return nil
}

//Matcher реализует интерфейс gomock.Matcher
func (c1 MessageID) Matches(x interface{}) bool {
	if c2, ok := x.(MessageID); ok {
		return c1 == c2
	}
	if id, ok := x.(uuid.UUID); ok {
		return uuid.UUID(c1).String() == id.String()
	}
	return false
}

//NewMessageID создает новый MessageID
func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

//MessageIDNil это nil MessageID
var MessageIDNil = MessageID(uuid.Nil)

//IsZero проверяет, является ли MessageID нулевым
func (c MessageID) IsZero() bool {
	return c == MessageIDNil
}

type UserID uuid.UUID

func (c UserID) String() string {
	return uuid.UUID(c).String()
}

//TextMarshaler реализует интерфейс encoding.TextMarshaler
func (c UserID) MarshalText() ([]byte, error) {
	return uuid.UUID(c).MarshalText()
}

//TextUnmarshaler реализует интерфейс encoding.TextUnmarshaler
func (c *UserID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

//ValueScanner реализует интерфейс entfield.ValueScanner
//из двух методов: Scan и Value
func (c *UserID) Scan(src interface{}) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c UserID) Value() (driver.Value, error) {
	return uuid.UUID(c).Value()
}

//Validator реализует интерфейс entfield.Validator
func (c UserID) Validate() error {
	if c == UserIDNil {
		return errors.New("UserID is nil")
	}
	return nil
}

//Matcher реализует интерфейс gomock.Matcher
func (c1 UserID) Matches(x interface{}) bool {
	if c2, ok := x.(UserID); ok {
		return c1 == c2
	}
	if id, ok := x.(uuid.UUID); ok {
		return uuid.UUID(c1).String() == id.String()
	}
	return false
}

//NewUserID создает новый UserID
func NewUserID() UserID {
	return UserID(uuid.New())
}

//UserIDNil это nil UserID
var UserIDNil = UserID(uuid.Nil)

//IsZero проверяет, является ли UserID нулевым
func (c UserID) IsZero() bool {
	return c == UserIDNil
}

type RequestID uuid.UUID

func (c RequestID) String() string {
	return uuid.UUID(c).String()
}

//TextMarshaler реализует интерфейс encoding.TextMarshaler
func (c RequestID) MarshalText() ([]byte, error) {
	return uuid.UUID(c).MarshalText()
}

//TextUnmarshaler реализует интерфейс encoding.TextUnmarshaler
func (c *RequestID) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

//ValueScanner реализует интерфейс entfield.ValueScanner
//из двух методов: Scan и Value
func (c *RequestID) Scan(src interface{}) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c RequestID) Value() (driver.Value, error) {
	return uuid.UUID(c).Value()
}

//Validator реализует интерфейс entfield.Validator
func (c RequestID) Validate() error {
	if c == RequestIDNil {
		return errors.New("RequestID is nil")
	}
	return nil
}

//Matcher реализует интерфейс gomock.Matcher
func (c1 RequestID) Matches(x interface{}) bool {
	if c2, ok := x.(RequestID); ok {
		return c1 == c2
	}
	if id, ok := x.(uuid.UUID); ok {
		return uuid.UUID(c1).String() == id.String()
	}
	return false
}

//NewRequestID создает новый RequestID
func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

//RequestIDNil это nil RequestID
var RequestIDNil = RequestID(uuid.Nil)

//IsZero проверяет, является ли RequestID нулевым
func (c RequestID) IsZero() bool {
	return c == RequestIDNil
}

// Parse парсит строку и возвращает UUID тип
func Parse[T any](s string) (T, error) {	
	var result T
	id, err := uuid.Parse(s)
	if err != nil {
		return result, err
	}
	
	// Преобразуем uuid.UUID в нужный тип
	switch any(result).(type) {
	case MessageID:
		return any(MessageID(id)).(T), nil
	case UserID:
		return any(UserID(id)).(T), nil
	default:
		return any(id).(T), nil
	}
}

// MustParse парсит строку и возвращает UUID тип или паникует
func MustParse[T any](s string) T {
	var result T
	id, err := uuid.Parse(s)
	if err != nil {
		panic(err)
	}
	
	// Преобразуем uuid.UUID в нужный тип
	switch any(result).(type) {
	case MessageID:
		return any(MessageID(id)).(T)
	case UserID:
		return any(UserID(id)).(T)
	default:
		return any(id).(T)
	}
}
